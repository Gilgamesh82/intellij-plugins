// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: toString.flex

package com.intellij.tsr.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.tsr.psi.TslTokenTypes.*;

public class _TslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u1b00\126\u0100\1\u2500\1\u0100\1\u2600"+
    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\53\u0100\1\u2c00\41\u1f00"+
    "\1\u0100\1\u2d00\1\u2e00\1\u0100\1\u2f00\1\u3000\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u0100\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\3\u0100"+
    "\1\u5000\1\u5100\1\u5200\11\u1f00\1\u5300\4\u0100\1\u5400\17\u1f00"+
    "\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600\1\u5700\2\u1f00\1\u5800"+
    "\1\u5900\27\u0100\1\u5a00\4\u0100\1\u5b00\1\u5c00\41\u1f00\1\u5d00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\27\u1f00\1\u6100\1\u6200"+
    "\1\u6300\1\u6400\7\u1f00\1\u6500\1\u6600\1\u6700\1\u6800\1\u1f00"+
    "\1\u6900\2\u1f00\1\u6a00\1\u6b00\1\u6c00\2\u1f00\1\u6d00\1\u1f00"+
    "\1\u6e00\21\u1f00\246\u0100\1\u6f00\20\u0100\1\u7000\1\u7100\25\u0100"+
    "\1\u7200\34\u0100\1\u7300\14\u1f00\2\u0100\1\u7400\5\u1f00\23\u0100"+
    "\1\u7500\17\u0100\1\u7600\u0ddc\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\0"+
    "\1\3\1\4\1\5\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\11\21"+
    "\1\22\1\23\1\0\1\24\2\0\1\25\4\5\1\26"+
    "\3\5\1\27\4\5\1\30\14\5\1\31\1\32\1\33"+
    "\1\0\1\5\1\0\1\34\3\35\1\36\1\37\2\5"+
    "\1\40\2\5\1\41\1\5\1\42\3\5\1\43\1\44"+
    "\1\45\1\46\3\5\1\47\1\5\1\50\1\0\1\51"+
    "\7\0\1\1\32\0\1\1\1\0\4\5\4\0\1\5"+
    "\12\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"+
    "\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5"+
    "\1\0\1\5\201\0\5\5\1\0\2\5\2\0\4\5"+
    "\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\24\5\1\0\123\5\1\0\213\5\10\0\246\5"+
    "\1\0\46\5\2\0\1\5\6\0\51\5\6\0\1\5"+
    "\100\0\33\5\4\0\4\5\30\0\1\5\24\0\53\5"+
    "\43\0\2\5\1\0\143\5\1\0\1\5\17\0\2\5"+
    "\7\0\2\5\12\0\3\5\2\0\1\5\20\0\1\5"+
    "\1\0\36\5\35\0\131\5\13\0\1\5\30\0\41\5"+
    "\11\0\2\5\4\0\1\5\3\0\30\5\4\0\1\5"+
    "\11\0\1\5\3\0\1\5\27\0\31\5\7\0\13\5"+
    "\5\0\30\5\1\0\6\5\21\0\52\5\72\0\66\5"+
    "\3\0\1\5\22\0\1\5\7\0\12\5\17\0\20\5"+
    "\4\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5"+
    "\15\0\2\5\1\0\3\5\16\0\4\5\7\0\2\5"+
    "\10\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\2\5\1\0\2\5\37\0\4\5"+
    "\1\0\1\5\23\0\3\5\20\0\11\5\1\0\3\5"+
    "\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\3\0\1\5\22\0\1\5\17\0\2\5\17\0\1\5"+
    "\7\0\1\5\13\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\3\0\1\5"+
    "\36\0\2\5\1\0\3\5\17\0\1\5\21\0\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5"+
    "\3\0\14\5\26\0\1\5\50\0\1\5\13\0\10\5"+
    "\1\0\3\5\1\0\27\5\1\0\20\5\3\0\1\5"+
    "\32\0\3\5\2\0\1\5\2\0\2\5\36\0\1\5"+
    "\4\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\3\0\1\5\37\0\2\5\1\0\2\5"+
    "\17\0\2\5\21\0\11\5\1\0\3\5\1\0\51\5"+
    "\2\0\1\5\20\0\1\5\5\0\3\5\10\0\3\5"+
    "\30\0\6\5\5\0\22\5\3\0\30\5\1\0\11\5"+
    "\1\0\1\5\2\0\7\5\72\0\60\5\1\0\2\5"+
    "\13\0\10\5\72\0\2\5\1\0\1\5\1\0\5\5"+
    "\1\0\30\5\1\0\1\5\1\0\12\5\1\0\2\5"+
    "\11\0\1\5\2\0\5\5\1\0\1\5\25\0\4\5"+
    "\40\0\1\5\77\0\10\5\1\0\44\5\33\0\5\5"+
    "\163\0\53\5\24\0\1\5\20\0\6\5\4\0\4\5"+
    "\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5"+
    "\14\0\1\5\21\0\46\5\1\0\1\5\5\0\1\5"+
    "\2\0\53\5\1\0\115\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\51\5\1\0\4\5"+
    "\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5"+
    "\2\0\103\5\45\0\20\5\20\0\126\5\2\0\6\5"+
    "\3\0\u016c\5\2\0\21\5\1\1\32\5\5\0\113\5"+
    "\3\0\13\5\7\0\22\5\15\0\23\5\16\0\22\5"+
    "\16\0\15\5\1\0\3\5\17\0\64\5\43\0\1\5"+
    "\3\0\2\5\103\0\131\5\7\0\5\5\2\0\42\5"+
    "\1\0\1\5\5\0\106\5\12\0\37\5\61\0\36\5"+
    "\2\0\5\5\13\0\54\5\4\0\32\5\66\0\27\5"+
    "\11\0\65\5\122\0\1\5\135\0\57\5\21\0\10\5"+
    "\66\0\36\5\15\0\2\5\12\0\54\5\32\0\44\5"+
    "\51\0\3\5\12\0\44\5\2\0\11\5\7\0\53\5"+
    "\2\0\3\5\51\0\4\5\1\0\6\5\1\0\2\5"+
    "\3\0\1\5\5\0\300\5\100\0\26\5\2\0\6\5"+
    "\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5"+
    "\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5"+
    "\1\0\7\5\3\0\13\1\35\0\2\1\5\0\1\1"+
    "\17\0\2\5\23\0\1\5\12\0\1\1\21\0\1\5"+
    "\15\0\1\5\20\0\15\5\3\0\41\5\101\0\1\5"+
    "\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5"+
    "\21\0\51\5\u0177\0\345\5\6\0\4\5\3\0\2\5"+
    "\14\0\46\5\1\0\1\5\5\0\1\5\2\0\70\5"+
    "\7\0\1\5\20\0\27\5\11\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\120\0\1\5\320\0\1\1"+
    "\4\0\3\5\31\0\11\5\7\0\5\5\2\0\5\5"+
    "\4\0\126\5\6\0\3\5\1\0\132\5\1\0\4\5"+
    "\5\0\53\5\1\0\136\5\21\0\40\5\60\0\235\5"+
    "\103\0\56\5\2\0\15\5\3\0\20\5\12\0\2\5"+
    "\24\0\57\5\20\0\37\5\2\0\120\5\47\0\11\5"+
    "\2\0\147\5\2\0\100\5\5\0\2\5\1\0\1\5"+
    "\1\0\5\5\30\0\20\5\1\0\3\5\1\0\4\5"+
    "\1\0\27\5\25\0\1\5\7\0\64\5\16\0\62\5"+
    "\76\0\6\5\3\0\1\5\1\0\2\5\13\0\34\5"+
    "\12\0\27\5\31\0\35\5\7\0\57\5\34\0\1\5"+
    "\20\0\5\5\1\0\12\5\12\0\5\5\1\0\51\5"+
    "\27\0\3\5\1\0\10\5\24\0\27\5\3\0\1\5"+
    "\3\0\62\5\1\0\1\5\3\0\2\5\2\0\5\5"+
    "\2\0\1\5\1\0\1\5\30\0\3\5\2\0\13\5"+
    "\7\0\3\5\14\0\6\5\2\0\6\5\2\0\6\5"+
    "\11\0\7\5\1\0\7\5\1\0\53\5\1\0\16\5"+
    "\6\0\163\5\35\0\244\5\14\0\27\5\4\0\61\5"+
    "\4\0\156\5\2\0\152\5\46\0\7\5\14\0\5\5"+
    "\5\0\1\5\1\0\12\5\1\0\15\5\1\0\5\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5"+
    "\41\0\153\5\22\0\100\5\2\0\66\5\50\0\15\5"+
    "\66\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5"+
    "\1\0\207\5\7\0\1\5\34\0\32\5\4\0\1\5"+
    "\1\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5"+
    "\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5"+
    "\31\0\14\5\1\0\32\5\1\0\23\5\1\0\2\5"+
    "\1\0\17\5\2\0\16\5\42\0\173\5\105\0\65\5"+
    "\u010b\0\35\5\3\0\61\5\57\0\40\5\15\0\36\5"+
    "\5\0\46\5\12\0\36\5\2\0\44\5\4\0\10\5"+
    "\1\0\5\5\52\0\236\5\22\0\44\5\4\0\44\5"+
    "\4\0\50\5\10\0\64\5\14\0\13\5\1\0\17\5"+
    "\1\0\7\5\1\0\2\5\1\0\13\5\1\0\17\5"+
    "\1\0\7\5\1\0\2\5\103\0\67\5\11\0\26\5"+
    "\12\0\10\5\30\0\6\5\1\0\52\5\1\0\11\5"+
    "\105\0\6\5\2\0\1\5\1\0\54\5\1\0\2\5"+
    "\3\0\1\5\2\0\27\5\12\0\27\5\11\0\37\5"+
    "\101\0\23\5\1\0\2\5\12\0\26\5\12\0\32\5"+
    "\106\0\70\5\6\0\2\5\100\0\1\5\17\0\4\5"+
    "\1\0\3\5\1\0\35\5\52\0\35\5\3\0\35\5"+
    "\43\0\10\5\1\0\34\5\33\0\66\5\12\0\26\5"+
    "\12\0\23\5\15\0\22\5\156\0\111\5\67\0\63\5"+
    "\15\0\63\5\15\0\44\5\u015c\0\52\5\6\0\2\5"+
    "\116\0\35\5\12\0\1\5\10\0\26\5\52\0\22\5"+
    "\56\0\25\5\33\0\27\5\14\0\65\5\71\0\2\5"+
    "\2\0\1\5\15\0\55\5\40\0\31\5\32\0\44\5"+
    "\35\0\1\5\2\0\1\5\10\0\43\5\3\0\1\5"+
    "\14\0\60\5\16\0\4\5\25\0\1\5\1\0\1\5"+
    "\43\0\22\5\1\0\31\5\23\0\2\5\77\0\7\5"+
    "\1\0\1\5\1\0\4\5\1\0\17\5\1\0\12\5"+
    "\7\0\57\5\46\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\3\0\1\5"+
    "\22\0\1\5\14\0\5\5\236\0\65\5\22\0\4\5"+
    "\24\0\3\5\36\0\60\5\24\0\2\5\1\0\1\5"+
    "\270\0\57\5\51\0\4\5\44\0\60\5\24\0\1\5"+
    "\73\0\53\5\15\0\1\5\107\0\33\5\45\0\7\5"+
    "\271\0\54\5\164\0\100\5\37\0\10\5\2\0\1\5"+
    "\2\0\10\5\1\0\2\5\1\0\30\5\17\0\1\5"+
    "\1\0\1\5\136\0\10\5\2\0\47\5\20\0\1\5"+
    "\1\0\1\5\34\0\1\5\12\0\50\5\7\0\1\5"+
    "\25\0\1\5\13\0\56\5\23\0\1\5\22\0\111\5"+
    "\7\0\11\5\1\0\45\5\21\0\1\5\61\0\36\5"+
    "\160\0\7\5\1\0\2\5\1\0\46\5\25\0\1\5"+
    "\31\0\6\5\1\0\2\5\1\0\40\5\16\0\1\5"+
    "\u0147\0\23\5\17\0\1\5\1\0\15\5\1\0\42\5"+
    "\174\0\1\5\54\0\4\5\37\0\232\5\146\0\157\5"+
    "\21\0\304\5\u014c\0\141\5\17\0\60\5\21\0\6\5"+
    "\271\0\107\5\271\0\71\5\7\0\37\5\21\0\117\5"+
    "\21\0\36\5\22\0\60\5\20\0\4\5\37\0\25\5"+
    "\5\0\23\5\260\0\100\5\200\0\113\5\5\0\1\5"+
    "\102\0\15\5\100\0\2\5\1\0\1\5\34\0\370\5"+
    "\10\0\326\5\52\0\11\5\u01e7\0\4\5\1\0\7\5"+
    "\1\0\2\5\1\0\43\5\17\0\1\5\35\0\3\5"+
    "\2\0\1\5\16\0\4\5\10\0\u018c\5\4\0\153\5"+
    "\5\0\15\5\3\0\11\5\7\0\12\5\146\0\125\5"+
    "\1\0\107\5\1\0\2\5\2\0\1\5\2\0\2\5"+
    "\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5"+
    "\1\0\101\5\1\0\4\5\2\0\10\5\1\0\7\5"+
    "\1\0\34\5\1\0\4\5\1\0\5\5\1\0\1\5"+
    "\3\0\7\5\1\0\u0154\5\2\0\31\5\1\0\31\5"+
    "\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5"+
    "\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5"+
    "\1\0\10\5\64\0\37\5\6\0\6\5\u0105\0\76\5"+
    "\222\0\55\5\12\0\7\5\20\0\1\5\u0141\0\36\5"+
    "\22\0\54\5\23\0\1\5\320\0\34\5\364\0\7\5"+
    "\1\0\4\5\1\0\2\5\1\0\17\5\1\0\305\5"+
    "\73\0\104\5\7\0\1\5\u0164\0\1\5\117\0\4\5"+
    "\1\0\33\5\1\0\2\5\1\0\1\5\2\0\1\5"+
    "\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5"+
    "\6\0\1\5\4\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5"+
    "\1\0\4\5\1\0\4\5\1\0\1\5\1\0\12\5"+
    "\1\0\21\5\5\0\3\5\1\0\5\5\1\0\21\5"+
    "\104\0\340\5\40\0\72\5\6\0\336\5\2\0\u0182\5"+
    "\16\0\u0131\5\37\0\36\5\342\0\113\5\5\0\u0160\5"+
    "\120\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30464];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\1\2\5\1\24\1\25"+
    "\1\26\3\5\1\27\1\30\2\3\2\7\2\0\1\20"+
    "\1\31\5\5\1\0\2\20\1\5\1\20\3\5\1\0"+
    "\2\5\1\32\1\33\1\0\1\5\1\34\1\0\1\5"+
    "\1\0\1\5\1\0\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\52\0\250\0\52\0\322"+
    "\0\52\0\52\0\52\0\52\0\52\0\374\0\52\0\52"+
    "\0\u0126\0\u0150\0\52\0\52\0\52\0\u017a\0\u01a4\0\u01ce"+
    "\0\52\0\52\0\52\0\u01f8\0\u0222\0\u024c\0\52\0\52"+
    "\0\52\0\u0276\0\52\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u017a"+
    "\0\u0348\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e"+
    "\0\u0498\0\250\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594"+
    "\0\250\0\250\0\u05be\0\u05e8\0\250\0\u0612\0\u063c\0\u0666"+
    "\0\u0690\0\u06ba\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\6\1\27\1\30"+
    "\1\31\1\32\1\33\3\6\1\34\2\6\1\35\2\6"+
    "\1\36\2\6\1\37\1\40\53\0\2\3\47\0\2\4"+
    "\1\0\1\41\26\4\1\42\17\4\5\0\1\6\10\0"+
    "\1\6\1\0\2\6\4\0\3\6\3\0\14\6\2\0"+
    "\2\10\1\0\4\10\1\43\22\10\1\44\17\10\20\0"+
    "\1\21\1\22\5\0\1\45\40\0\1\46\7\0\1\47"+
    "\7\0\1\47\31\0\1\46\1\0\2\22\4\0\1\47"+
    "\7\0\1\47\33\0\2\50\12\0\4\50\17\0\1\6"+
    "\10\0\1\6\1\0\2\6\4\0\3\6\3\0\6\6"+
    "\1\51\5\6\7\0\1\6\10\0\1\6\1\0\2\6"+
    "\4\0\3\6\3\0\1\52\13\6\7\0\1\6\10\0"+
    "\1\6\1\0\2\6\4\0\3\6\3\0\1\53\13\6"+
    "\7\0\1\6\10\0\1\6\1\0\2\6\4\0\3\6"+
    "\3\0\12\6\1\54\1\6\7\0\1\6\10\0\1\6"+
    "\1\0\2\6\4\0\3\6\3\0\7\6\1\55\4\6"+
    "\2\0\2\4\1\0\47\4\2\10\1\0\47\10\42\0"+
    "\1\56\27\0\2\57\43\0\1\60\1\0\1\60\2\0"+
    "\2\60\35\0\1\6\10\0\1\6\1\0\2\6\4\0"+
    "\3\6\3\0\3\6\1\61\10\6\7\0\1\6\10\0"+
    "\1\6\1\0\2\6\4\0\2\6\1\62\3\0\14\6"+
    "\7\0\1\6\10\0\1\6\1\0\2\6\4\0\3\6"+
    "\3\0\5\6\1\63\6\6\7\0\1\6\10\0\1\6"+
    "\1\0\2\6\4\0\3\6\3\0\5\6\1\64\6\6"+
    "\7\0\1\6\10\0\1\6\1\0\2\6\4\0\3\6"+
    "\3\0\12\6\1\65\1\6\41\0\1\66\32\0\2\57"+
    "\4\0\1\47\7\0\1\47\33\0\2\60\35\0\1\6"+
    "\10\0\1\6\1\0\2\6\4\0\3\6\3\0\4\6"+
    "\1\67\7\6\7\0\1\6\10\0\1\6\1\0\2\6"+
    "\4\0\3\6\3\0\10\6\1\70\3\6\7\0\1\6"+
    "\10\0\1\6\1\0\2\6\4\0\3\6\3\0\5\6"+
    "\1\71\6\6\7\0\1\6\10\0\1\6\1\0\2\6"+
    "\4\0\3\6\3\0\2\6\1\72\11\6\42\0\1\73"+
    "\16\0\1\6\10\0\1\6\1\0\2\6\4\0\3\6"+
    "\3\0\6\6\1\74\5\6\7\0\1\6\10\0\1\6"+
    "\1\0\2\6\4\0\3\6\3\0\2\6\1\75\11\6"+
    "\44\0\1\76\14\0\1\6\10\0\1\6\1\0\2\6"+
    "\4\0\3\6\3\0\4\6\1\77\7\6\42\0\1\100"+
    "\16\0\1\6\10\0\1\6\1\0\2\6\4\0\3\6"+
    "\3\0\11\6\1\101\2\6\47\0\1\102\11\0\1\6"+
    "\10\0\1\6\1\0\2\6\4\0\3\6\3\0\13\6"+
    "\1\62\51\0\1\103\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1764];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\1\1\5\11"+
    "\1\1\2\11\2\1\3\11\3\1\3\11\3\1\3\11"+
    "\1\1\1\11\1\1\2\0\7\1\1\0\7\1\1\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _TslLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 29: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 30: break;
          case 3:
            { return DOUBLE_QUOTED_STRING;
            }
          // fall through
          case 31: break;
          case 4:
            { return SHARP;
            }
          // fall through
          case 32: break;
          case 5:
            { return IDENTIFIER;
            }
          // fall through
          case 33: break;
          case 6:
            { return PERCENT;
            }
          // fall through
          case 34: break;
          case 7:
            { return SINGLE_QUOTED_STRING;
            }
          // fall through
          case 35: break;
          case 8:
            { return LPARENTH;
            }
          // fall through
          case 36: break;
          case 9:
            { return RPARENTH;
            }
          // fall through
          case 37: break;
          case 10:
            { return STAR;
            }
          // fall through
          case 38: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 39: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 40: break;
          case 13:
            { return DASH;
            }
          // fall through
          case 41: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 42: break;
          case 15:
            { return SLASH;
            }
          // fall through
          case 43: break;
          case 16:
            { return NUMBER;
            }
          // fall through
          case 44: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 45: break;
          case 18:
            { return SEMICOLON;
            }
          // fall through
          case 46: break;
          case 19:
            { return ASSIGN;
            }
          // fall through
          case 47: break;
          case 20:
            { return LBRACKET;
            }
          // fall through
          case 48: break;
          case 21:
            { return BACKSLASH;
            }
          // fall through
          case 49: break;
          case 22:
            { return RBRACKET;
            }
          // fall through
          case 50: break;
          case 23:
            { return LBRACE;
            }
          // fall through
          case 51: break;
          case 24:
            { return RBRACE;
            }
          // fall through
          case 52: break;
          case 25:
            { return STRUDEL_HEX;
            }
          // fall through
          case 53: break;
          case 26:
            { return NULL;
            }
          // fall through
          case 54: break;
          case 27:
            { return TRUE;
            }
          // fall through
          case 55: break;
          case 28:
            { return FALSE;
            }
          // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
