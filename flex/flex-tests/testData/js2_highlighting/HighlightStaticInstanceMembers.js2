var <symbolName descr="identifiers//global variable">globalVar</symbolName>:int;

class <symbolName descr="classes//class name">SampleClass</symbolName> {
    static var <symbolName descr="static field">staticField</symbolName>:int;
    static function <symbolName descr="static method">staticMethod</symbolName>():void {}
    function <symbolName descr="instance method">instanceMethod</symbolName>(<symbolName descr="identifiers//parameter">p</symbolName>):int {}
    var <symbolName descr="instance field">instanceField</symbolName>:int;
}

function <symbolName descr="identifiers//global function">testFun</symbolName>(<symbolName descr="identifiers//parameter">param</symbolName>:int):void {
    <symbolName descr="classes//class name">SampleClass</symbolName>.<symbolName descr="static field">staticField</symbolName> = <symbolName descr="identifiers//global variable">globalVar</symbolName>
    <symbolName descr="classes//class name">SampleClass</symbolName>.<symbolName descr="static method">staticMethod</symbolName>();
    var <symbolName descr="identifiers//local variable">a</symbolName>:<symbolName descr="classes//class name">SampleClass</symbolName>;
    <symbolName descr="identifiers//local variable">a</symbolName>.<symbolName descr="instance method">instanceMethod</symbolName>(<symbolName descr="identifiers//parameter">param</symbolName>)
    <symbolName descr="identifiers//local variable">a</symbolName>.<symbolName descr="instance field">instanceField</symbolName> = 1
}

class <symbolName descr="classes//class name">SomeConstants</symbolName> {
    public static const <symbolName descr="static field">SOME_CONST</symbolName>:<symbolName descr="classes//class name">String</symbolName> = "test";
}

class <symbolName descr="classes//class name">Foo2</symbolName> {
    public function <symbolName descr="instance method">f</symbolName>():void {
        var <symbolName descr="identifiers//local variable">aa</symbolName>:<symbolName descr="classes//class name">String</symbolName> = <error descr="Unresolved variable or type SOME_CONST">SOME_CONST</error>;
    }
}

class <symbolName descr="classes//class name">Base</symbolName> {
    var <symbolName descr="instance field">x</symbolName>;
    public static function  <symbolName descr="static method">staticFunction</symbolName>():void {}
}

class <symbolName descr="classes//class name">Derived</symbolName> extends <symbolName descr="classes//class name">Base</symbolName> {
    var <symbolName descr="instance field">x2</symbolName>;

    public static function  <symbolName descr="static method">derivedStaticFunction</symbolName>():void {
      <error descr="Instance member is not accessible"><symbolName descr="instance field">x</symbolName></error> = 1;
      <error descr="Instance member is not accessible"><symbolName descr="instance field">x2</symbolName></error> = 1;
      <symbolName descr="classes//class name">Base</symbolName>.<error descr="Instance member is not accessible"><symbolName descr="instance field">x</symbolName></error> = 1;
      <symbolName descr="classes//class name">Derived</symbolName>.<error descr="Instance member is not accessible"><symbolName descr="instance field">x</symbolName></error> = 1;
      <symbolName descr="classes//class name">Derived</symbolName>.<error descr="Instance member is not accessible"><symbolName descr="instance field">x2</symbolName></error> = 1;
    }
}

<symbolName descr="classes//class name">Base</symbolName>.<symbolName descr="static method">staticFunction</symbolName>();
<symbolName descr="classes//class name">Derived</symbolName>.<symbolName descr="static method">derivedStaticFunction</symbolName>();
<symbolName descr="classes//class name">Derived</symbolName>.<error descr="Static member is not accessible"><symbolName descr="static method">staticFunction</symbolName></error>();
